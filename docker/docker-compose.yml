version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: pms_postgres
    environment:
      POSTGRES_USER: pms_user
      POSTGRES_PASSWORD: pms_password
      POSTGRES_DB: pms_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pms_user -d pms_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pms_network

  redis:
    image: redis:7
    container_name: pms_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pms_network

  backend:
    build:
      context: ../services/backend
      dockerfile: Dockerfile
    container_name: pms_backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=pms_user
      - DB_PASSWORD=pms_password
      - DB_NAME=pms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - pms_network

  ai-service:
    build:
      context: ../services/ai-service
      dockerfile: Dockerfile
    container_name: pms_ai_service
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=pms_user
      - DB_PASSWORD=pms_password
      - DB_NAME=pms_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - pms_network

volumes:
  postgres_data:
  redis_data:

networks:
  pms_network:
    driver: bridge